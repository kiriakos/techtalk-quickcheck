import Test.QuickCheck

isPower :: (Integral a, Ord a) => a -> a -> Bool
isPower base n
                | base == 0           = True
                | n == 1              = True
                | n == 0              = False
                | m /= 0              = False
                | base == n           = True
                | d < base            = False
                | d == base && m == 0 = True
                | d > base            = isPower base d
                where   d = div n base
                        m = mod n base

-- isPower should detect all exponents
prop_isPowerDetectsExponents (Positive base) (NonNegative exponent) =
    let exp = base^exponent
    in isPower base exp == True

-- isPower should return False for all non exponents
prop_isPowerIsFalseOtherwise (Positive base) (NonNegative exponent) =
    let maxOffset = base - 1
        exp = base^exponent
        range | exponent == 0 = []
              | maxOffset > 1 = [1..maxOffset]
              | otherwise = []
        falses = [False | x <- range]
    in  [isPower base (exp + x) | x <- range] == falses
